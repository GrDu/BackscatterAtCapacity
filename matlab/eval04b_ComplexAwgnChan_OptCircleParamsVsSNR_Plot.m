% Plots the parameters of the (finite number of) concentric circles that
% describe the capacity-achieving transmit distribution over a
% peak-power-constrained complex-valued AWGN channel. This is done for many
% different signal-to-noise ratio (SNR) values with a thorough sweep.
%
% This script relies on the precomputed data in 
% channelCapacity_ComplexAwgnChan_PeakPowerConstr_4to40dB.mat
% which is generated by
% eval04a_ComplexAwgnChan_OptCircleParamsVsSNR_Compute.m
%
% This generates Fig.4 (with add-ons) of the paper stated below.
% 
%--------------------------------------------------------------------------
%   This code repository accompanies the following academic publication:
%   Gregor Dumphart, Johannes Sager, Armin Wittneben,
%   "Load Modulation for Backscatter Communication: Channel Capacity and
%   Capacity-Approaching Finite Constellations."
%   arXiv preprint arXiv:2207.08100, July 2022.  
%   Available online at (open access): https://arxiv.org/abs/2207.08100
%
%   Coded by: Gregor Dumphart (gregord.research@gmail.com), July 2022,
%   ETH Zurich (D-ITET, Wireless Communications Group), Switzerland.
%   BSD 3-Clause License applies. Copyright (c) 2022, Gregor Dumphart.
%--------------------------------------------------------------------------   
clear all
addpath 'functions'
load channelCapacity_ComplexAwgnChan_PeakPowerConstr_4to40dB

figure(40201), clf

plot(SNR_dB, R_max, 'b-' , 'LineWidth', 1.5, 'DisplayName', 'channel capacity with peak-power constraint 1'), hold on
plot(SNR_dB, R_UD , 'b-.', 'LineWidth', 1.5, 'DisplayName', 'achievable rate, maximum-entropy signaling')
plot(SNR_dB, R_LB , 'b:' , 'LineWidth', 1.5, 'DisplayName', 'lower bound log_2(1 + SNR / e)')

grid on
xlabel('SNR [dB]')
ylabel('achievable information rate [bpcu]')
legend('show', 'Location', 'SouthEast')
xlim([min(SNR_dB), max(SNR_dB)]),
xticks(-60 : 5 : 60)

figure(40202), clf
for k = 1 : max(K_evolution)
   plot(SNR_dB, ak_evolution(k,:) ./ ak_evolution(1,:), '-', 'Marker', 'none', 'LineWidth', 2, 'HandleVisibility', 'off')
   hold on 
end
grid on
xlabel('SNR [dB]')
ylabel('circle radius a_k')
xlim([min(SNR_dB), max(SNR_dB)]),
xticks(-60 : 4 : 60)
yticks(0 : .1 : 1)
set(gca, 'YTickLabel', {'0','.1','.2','.3','.4','.5','.6','.7','.8','.9','1'})

figure(40203), clf
for k = 1 : max(K_evolution)
   plot(SNR_dB, qk_evolution(k,:), '-', 'Marker', 'none', 'LineWidth', 1, 'HandleVisibility', 'off')
   hold on
end
grid on
xlabel('SNR [dB]')
ylabel('circle probability q_k')
xlim([min(SNR_dB), max(SNR_dB)]), ylim([0 1])
xticks(-60 : 4 : 60)
yticks(0 : .1 : 1)
set(gca, 'YTickLabel', {'0','.1','.2','.3','.4','.5','.6','.7','.8','.9','1'})


% plot probability density on the different circles

figure(40204), clf
 
subplot(2,1,1)

plot(SNR_dB, qk_evolution ./ (2*pi*ak_evolution), 'LineWidth', 1, 'HandleVisibility', 'off')
grid on
xlabel('SNR [dB]')
ylabel('lateral prob. dens. q_k/(2\pi a_k)')
xlim([min(SNR_dB), max(SNR_dB)]), ylim([0 .05])
xticks(-60 : 4 : 60)

subplot(2,1,2)

M = sum(~isnan(ak_evolution(:,end)));
x = qk_evolution(1:M,:) ./ ak_evolution(1:M,:);
y = qk_evolution(1,:) ./ ak_evolution(1,:);
z = x ./ y;
plot(SNR_dB, z, 'LineWidth', 2, 'HandleVisibility', 'off')
grid on, hold on
xlabel('SNR [dB]')
ylabel('(q_k/a_k) / (q_1/a_1)')
xlim([min(SNR_dB), max(SNR_dB)]),
ylim([0 2])
xticks(-60 : 4 : 60)
plot(SNR_dB, ones(size(SNR_dB)) * 2/3, 'k--', 'LineWidth', 1)
plot(SNR_dB, ones(size(SNR_dB)) * 1/sqrt(3), 'k--', 'LineWidth', 1)

% plot versus SNR the key quantities that occur during capacity calculation

targetSNR_dB = 20;
[~,idxSNR] = min(abs(SNR_dB - targetSNR_dB));
actualSNR_dB = SNR_dB(idxSNR)
actualSNR = 10^(actualSNR_dB / 10);

p = qk_evolution(:,idxSNR)';
ak = ak_evolution(:,idxSNR)' / ak_evolution(1,idxSNR);
sk = ak * sqrt(SNR(idxSNR));
rho = SNR(idxSNR);
b = linspace(0, 1+3/sqrt(rho), 301);
f_b = 0;
for k = 1 : K_evolution(idxSNR)
    f_b_ak = 2*rho*b .* exp(-rho*(b - ak(k)).^2) .* besseli(0, 2*rho*ak(k)*b, 1);
    f_b_ak(isnan(f_b_ak)) = 0;
    f_b = f_b + p(k) .* f_b_ak;
    
    %subplot(K_evolution(idxSNR), 1, k)
    %plot(b, f_b_ak), hold on
end
f_b_UD = 2*b.*(1 - marcumq(b*sqrt(2*actualSNR),sqrt(2*actualSNR)));

figure(40205), clf

subplot(3,1,1)
plot(b, f_b, 'k'), hold on
plot(b, f_b_UD, 'b-.')
xlabel('b'), ylabel('PDF f_b(b)'), grid on
subplot(3,1,2)
plot(b, f_b ./ b, 'k'), hold on
plot(b, f_b_UD ./ b, 'b-.')
xlabel('b'), ylabel('f_b(b) / b'), grid on
subplot(3,1,3)
plot(b, -f_b .* log2(f_b ./ b), 'k'), hold on
plot(b, -f_b_UD .* log2(f_b_UD ./ b), 'b-.')
xlabel('b'), ylabel('-f_b(b) log_2(f_b(b) / b)'), grid on

% % Check the validity of all the circle PMFs
% for nSNR = 1 : size(qk_evolution,2)
%    qk = qk_evolution(:,nSNR);
%    qk = qk(~isnan(qk));
%    probabilitySumError = sum(qk) - 1
% end

figure(40206), clf
subplot(2,1,1)
semilogy(SNR_dB, R_max - R_UD, 'b-.', 'LineWidth', 1.5), hold on
semilogy(SNR_dB, R_max - R_LB, 'b:' , 'LineWidth', 1.5)
legend('R_{max} - R_{UD}', ...
       'R_{max} - log_2(1 + \rho/e)','location','southwest')
ylabel('diff. to ref. rate [bpcu]')
xlabel('SNR [dB]')
grid on
subplot(2,1,2)
semilogy(SNR_dB, R_max ./ R_UD - 1, 'b-.', 'LineWidth', 1.5), hold on
semilogy(SNR_dB, R_max ./ R_LB - 1, 'b:' , 'LineWidth', 1.5)
semilogy(SNR_dB, R_UD  ./ R_LB - 1, 'r-' , 'LineWidth', 1.5)
legend('R_{max} / R_{UD} - 1', ...
       'R_{max} / log_2(1 + \rho/e) - 1', ...
       'R_{UD} / log_2(1 + \rho/e) - 1','location','southwest')
ylabel('rel. gap to ref. rate')
xlabel('SNR [dB]')
grid on
